/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/myoperator/podrestartoperator/pkg/apis/podrestarter/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodReStarterLister helps list PodReStarters.
// All objects returned here must be treated as read-only.
type PodReStarterLister interface {
	// List lists all PodReStarters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Podrestarter, err error)
	// PodReStarters returns an object that can list and get PodReStarters.
	PodReStarters(namespace string) PodReStarterNamespaceLister
	PodReStarterListerExpansion
}

// podReStarterLister implements the PodReStarterLister interface.
type podReStarterLister struct {
	indexer cache.Indexer
}

// NewPodReStarterLister returns a new PodReStarterLister.
func NewPodReStarterLister(indexer cache.Indexer) PodReStarterLister {
	return &podReStarterLister{indexer: indexer}
}

// List lists all PodReStarters in the indexer.
func (s *podReStarterLister) List(selector labels.Selector) (ret []*v1alpha1.Podrestarter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Podrestarter))
	})
	return ret, err
}

// PodReStarters returns an object that can list and get PodReStarters.
func (s *podReStarterLister) PodReStarters(namespace string) PodReStarterNamespaceLister {
	return podReStarterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodReStarterNamespaceLister helps list and get PodReStarters.
// All objects returned here must be treated as read-only.
type PodReStarterNamespaceLister interface {
	// List lists all PodReStarters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Podrestarter, err error)
	// Get retrieves the PodReStarter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Podrestarter, error)
	PodReStarterNamespaceListerExpansion
}

// podReStarterNamespaceLister implements the PodReStarterNamespaceLister
// interface.
type podReStarterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodReStarters in the indexer for a given namespace.
func (s podReStarterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Podrestarter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Podrestarter))
	})
	return ret, err
}

// Get retrieves the PodReStarter from the indexer for a given namespace and name.
func (s podReStarterNamespaceLister) Get(name string) (*v1alpha1.Podrestarter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("podrestarter"), name)
	}
	return obj.(*v1alpha1.Podrestarter), nil
}
